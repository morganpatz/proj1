/***
 *  A sample program to demonstrate how to use servlet to 
 *  load an image file from the client disk via a web browser
 *  and insert the image into a table in Oracle DB.
 *  
 *  Copyright 2005 COMPUT 391 Team, CS, UofA                             
 *  Author:  Fan Deng
 *                                                                  
 *  Licensed under the Apache License, Version 2.0 (the "License");         
 *  you may not use this file except in compliance with the License.        
 *  You may obtain a copy of the License at                                 
 *      http://www.apache.org/licenses/LICENSE-2.0                          
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *
 *  the table shall be created using the following
      CREATE TABLE images (
           photo_id    int,
	   owner_name  varchar(24),
	   permitted   int,
	   subject     varchar(128),
	   place       varchar(128),
	   timing      date,
	   description varchar(2048),
	   thumbnail   blob,
	   photo       blob,
	   PRIMARY KEY(photo_id),
	   FOREIGN KEY(owner_name) REFERENCES users,
	   FOREIGN KEY(permitted) REFERENCES groups
      );
 *
 *  One may also need to create a sequence using the following 
 *  SQL statement to automatically generate a unique pic_id:
 *
 *   CREATE SEQUENCE pic_id_sequence;
 *
 ***/

import java.awt.image.BufferedImage;
import java.io.*;

import javax.imageio.ImageIO;
import javax.servlet.*;
import javax.servlet.http.*;
import java.sql.*;
import java.util.Date;
import java.util.*;
import oracle.sql.*;
import oracle.jdbc.*;
import java.util.Date.*;

/**
 *  The package commons-fileupload-1.0.jar is downloaded from 
 *         http://jakarta.apache.org/commons/fileupload/ 
 *  and it has to be put under WEB-INF/lib/ directory in your servlet context.
 *  One shall also modify the CLASSPATH to include this jar file.
 */
import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.io.FilenameUtils;

public class UploadImage extends HttpServlet {
	public String response_message = "Nothing Happened";

	private Connection conn = null;

	// initial values
	String username = "patzelt";
	String password = "Chocolate1";
	String drivername = "oracle.jdbc.driver.OracleDriver";
	String dbstring = "jdbc:oracle:thin:@gwynne.cs.ualberta.ca:1521:CRS";

	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// change the following parameters to connect to the oracle database
		int photo_id = 0;
		String subject = null;
		String location = null;
		String date = null;
		String description = null;
		String permission = null;
		String groupName = null;
		int permissionValue = 2;
		File photo = null;
		Date sqlDate = null;
		String command = "";
		InputStream instream = null;
		Statement stmt = null;
		PreparedStatement stmt1 = null;
		PrintWriter out = response.getWriter();

		Security.sec = new Security();

		String userid = "";
		Cookie login_cookie = null;
		Cookie cookie = null;
		Cookie[] cookies = null;
		// Get an array of cookies associated with this domain
		cookies = request.getCookies();
		// If any cookies were found, see if any of them contain a valid login.
		if (cookies != null) {
			for (int i = 0; i < cookies.length; i++) {
				cookie = cookies[i];
				// out.println(cookie.getName()+"<br>");
				// However, we only want one cookie, the one whose name matches
				// the
				// userid that has logged in on this browser.
				if (i != 0 && userid == "") {
					userid = cookie.getName();
				}
			}
		}
		// If no login was detected, redirect the user to the login page.
		if (userid == "") {
			out.println("<a href=login.jsp>Please login to access this site.</a>");
		}
		// Else, we have a valid session.
		else {

			try {
				// Parse the HTTP request to get the image stream
				DiskFileUpload fu = new DiskFileUpload();
				List FileItems = fu.parseRequest(request);

				// Process the uploaded items, assuming only 1 image file
				// uploaded
				Iterator i = FileItems.iterator();
				FileItem item = (FileItem) i.next();
				String fieldname = "";
				String fieldvalue;
				while (i.hasNext() && item.isFormField()) {
					// Process regular form field (input
					// type="text|radio|checkbox|etc", select, etc).
					fieldname = item.getFieldName();
					fieldvalue = item.getString();

					if (fieldname.equals("subject")) {
						subject = fieldvalue;
					} else if (fieldname.equals("location")) {
						location = fieldvalue;
					} else if (fieldname.equals("SnapHost_Calendar")) {
						date = fieldvalue;
					} else if (fieldname.equals("description")) {
						description = fieldvalue;
					} else if (fieldname.equals("permission")) {
						permission = fieldvalue;
					} else if (fieldname.equals("groupName")) {
						groupName = fieldvalue;
					}
					item = (FileItem) i.next();
					response_message = response_message + fieldname;

				}
				// Process form file field (input type="file").
				fieldname = item.getFieldName();
				String filename = FilenameUtils.getName(item.getName());
				instream = item.getInputStream();
				response_message = response_message + fieldname;

				// BufferedImage img = ImageIO.read(instream);
				// BufferedImage thumbnail = shrink(img, 10);

				// Connect to the database and create a statement
				Connection conn;
				conn = getConnected(drivername, dbstring, username, password);
				stmt = conn.createStatement();

				/*
				 * First, to generate a unique pic_id using an SQL sequence
				 */
				ResultSet rset1 = stmt
						.executeQuery("SELECT pic_id_sequence.nextval from dual"); // good
				rset1.next();
				photo_id = rset1.getInt(1);

				response_message = response_message + "photoid";

				if (permission.equals("everyone")) {
					permissionValue = 1;
				} else if (permission.equals("useronly")) {
					permissionValue = 2;
				} else if (permission.equals("group")) {
					// Set permission value to 0 to indicate no
					// valid group in the case the user does not
					// supply a valid group ID.
					permissionValue = 0;
					// What we actually want is the group ID
					String groupid = sec.find_group_id(userid, groupName,
							conn);
					// If a matching group ID is found, add it.
					if (groupid != "") {
						permissionValue = Integer.parseInt(groupid);
					}

				}

				// If a valid permitted value was supplied,
				// perform the insert statement.
				if (permissionValue != 0) {
					command = "INSERT INTO images VALUES (" + photo_id + ", '"
							+ userid + "', " + permissionValue + ", '"
							+ subject + "', '" + location + "', to_date('"
							+ date + "', 'YYYY-MM-DD'), '" + description
							+ "', empty_blob(), empty_blob())";
					response_message = response_message + "query";

					stmt.execute(command);
					response_message = response_message + "executed";

					stmt1 = conn
							.prepareStatement("UPDATE images SET photo = ? WHERE photo_id = "
									+ photo_id);
					response_message = response_message + "update";
					stmt1.setBinaryStream(1, instream);
					stmt1.executeUpdate();
					response_message = response_message + "update1";

					PreparedStatement stmt2 = conn
							.prepareStatement("UPDATE images SET thumbnail = photo WHERE photo_id = "
									+ photo_id);
					stmt2.executeUpdate();
					response_message = response_message + "update2";

					response_message = "File Uploaded!";
				}
			} catch (Exception e) {
				response_message = response_message + "uh oh";
			}
		}
		try {

			if (permissionValue == 0) {
				response_message = "Please Enter A Valid Group Name";
				// Output response to the client
				response.setContentType("text/html");
				out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
						+ "Transitional//EN\">\n" + "<HTML>\n"
						+ "<HEAD><TITLE>Upload Message</TITLE></HEAD>\n"
						+ "<BODY>\n" + "<H1>" + response_message + "</H1>\n"
						+ "</BODY></HTML>");
				out.println("<P><a href=\"UploadImage\"> Try Again </a>");
				out.println("</body>");
				out.println("</html>");
			}
			// Output response to the client
			response.setContentType("text/html");
			out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 "
					+ "Transitional//EN\">\n" + "<HTML>\n"
					+ "<HEAD><TITLE>Upload Message</TITLE></HEAD>\n"
					+ "<BODY>\n" + "<H1>" + response_message + "</H1>\n"
					+ "</BODY></HTML>");
			out.println("<P><a href=\"PictureBrowse\"> See Pictures </a>");
			out.println("</body>");
			out.println("</html>");
		} catch (Exception e) {
			response_message = response_message + "4";
		}

	}

	/*
	 * /* To connect to the specified database
	 */
	private static Connection getConnected(String drivername, String dbstring,
			String username, String password) throws Exception {
		Class drvClass = Class.forName(drivername);
		DriverManager.registerDriver((Driver) drvClass.newInstance());
		return (DriverManager.getConnection(dbstring, username, password));
	}

	// shrink image by a factor of n, and return the shrinked image
	public static BufferedImage shrink(BufferedImage image, int n) {

		int w = image.getWidth() / n;
		int h = image.getHeight() / n;

		BufferedImage shrunkImage = new BufferedImage(w, h, image.getType());

		for (int y = 0; y < h; ++y)
			for (int x = 0; x < w; ++x)
				shrunkImage.setRGB(x, y, image.getRGB(x * n, y * n));

		return shrunkImage;
	}

}
